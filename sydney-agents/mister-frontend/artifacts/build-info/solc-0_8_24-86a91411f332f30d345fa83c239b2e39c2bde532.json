{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_24-86a91411f332f30d345fa83c239b2e39c2bde532",
  "solcVersion": "0.8.24",
  "solcLongVersion": "0.8.24+commit.e11b9ed9",
  "userSourceNameMap": {
    "src/contracts/hyperevm/AIAgentVault.sol": "project/src/contracts/hyperevm/AIAgentVault.sol",
    "src/contracts/hyperevm/L1Read.sol": "project/src/contracts/hyperevm/L1Read.sol",
    "src/contracts/hyperevm/VaultFactory.sol": "project/src/contracts/hyperevm/VaultFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/src/contracts/hyperevm/AIAgentVault.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/**\n * @title AIAgentVault\n * @notice Trustless vault for AI-managed trading on Hyperliquid\n * @dev Integrates with HyperCore precompiles for oracle prices and trading\n */\ncontract AIAgentVault is Ownable, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n\n    // HyperCore Precompile Addresses\n    address constant ORACLE_PX_PRECOMPILE = 0x0000000000000000000000000000000000000807;\n    address constant PERP_ASSET_INFO_PRECOMPILE = 0x000000000000000000000000000000000000080a;\n    address constant USER_POSITION_PRECOMPILE = 0x000000000000000000000000000000000000080b;\n    address constant SPOT_META_PRECOMPILE = 0x0000000000000000000000000000000000000808;\n    \n    // Vault Configuration\n    IERC20 public immutable depositToken; // USDC on HyperEVM\n    address public keeperBot; // Authorized keeper bot address\n    address public aiAgent; // AI agent that generates signals\n    \n    // Vault State\n    uint256 public totalDeposits;\n    uint256 public totalWithdrawals;\n    uint256 public highWaterMark;\n    uint256 public lastPerformanceUpdate;\n    \n    // User Balances\n    mapping(address => uint256) public userDeposits;\n    mapping(address => uint256) public userShares;\n    uint256 public totalShares;\n    \n    // Trading Parameters\n    struct TradingConfig {\n        uint256 maxPositionSize; // Maximum position size in USDC\n        uint256 maxLeverage; // Maximum leverage (10 = 10x)\n        uint256 maxDrawdown; // Maximum drawdown before pause (basis points)\n        uint256 performanceFee; // Performance fee (basis points)\n        uint256 managementFee; // Annual management fee (basis points)\n        uint32[] allowedAssets; // Allowed perpetual indices\n    }\n    TradingConfig public tradingConfig;\n    \n    // Trading Authorization\n    struct TradeAuthorization {\n        uint32 perpIndex; // Perpetual index to trade\n        bool isLong; // Direction\n        uint256 size; // Position size in USDC\n        uint256 leverage; // Leverage amount\n        uint256 maxSlippage; // Maximum allowed slippage (basis points)\n        uint256 stopLoss; // Stop loss price (0 for none)\n        uint256 takeProfit; // Take profit price (0 for none)\n        uint256 expiry; // Authorization expiry timestamp\n        bytes32 signalId; // Unique signal identifier\n        bool executed; // Whether trade was executed\n    }\n    \n    mapping(bytes32 => TradeAuthorization) public tradeAuthorizations;\n    bytes32[] public pendingAuthorizations;\n    \n    // Performance Tracking\n    struct Performance {\n        uint256 totalPnL; // Total profit/loss\n        uint256 winCount; // Number of winning trades\n        uint256 lossCount; // Number of losing trades\n        uint256 totalVolume; // Total trading volume\n        uint256 sharpeRatio; // Sharpe ratio (scaled by 1e18)\n        uint256 maxDrawdown; // Maximum drawdown experienced\n        uint256 lastUpdate; // Last performance update\n    }\n    Performance public performance;\n    \n    // Events\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\n    event TradeAuthorized(\n        bytes32 indexed signalId,\n        uint32 perpIndex,\n        bool isLong,\n        uint256 size,\n        uint256 leverage\n    );\n    event TradeExecuted(\n        bytes32 indexed signalId,\n        uint256 executionPrice,\n        uint256 actualSize\n    );\n    event PerformanceUpdated(\n        uint256 totalPnL,\n        uint256 sharpeRatio,\n        uint256 timestamp\n    );\n    event EmergencyStop(string reason, uint256 timestamp);\n    \n    // Modifiers\n    modifier onlyKeeperBot() {\n        require(msg.sender == keeperBot, \"Only keeper bot\");\n        _;\n    }\n    \n    modifier onlyAIAgent() {\n        require(msg.sender == aiAgent, \"Only AI agent\");\n        _;\n    }\n    \n    /**\n     * @notice Initialize the vault\n     * @param _depositToken USDC token address on HyperEVM\n     * @param _keeperBot Keeper bot address\n     * @param _aiAgent AI agent address\n     */\n    constructor(\n        address _depositToken,\n        address _keeperBot,\n        address _aiAgent\n    ) Ownable(msg.sender) {\n        depositToken = IERC20(_depositToken);\n        keeperBot = _keeperBot;\n        aiAgent = _aiAgent;\n        \n        // Default trading configuration\n        tradingConfig = TradingConfig({\n            maxPositionSize: 100000 * 1e6, // 100k USDC\n            maxLeverage: 10, // 10x max\n            maxDrawdown: 2000, // 20% max drawdown\n            performanceFee: 2000, // 20% performance fee\n            managementFee: 200, // 2% annual management fee\n            allowedAssets: new uint32[](0)\n        });\n        \n        lastPerformanceUpdate = block.timestamp;\n    }\n    \n    /**\n     * @notice Deposit USDC into the vault\n     * @param amount Amount of USDC to deposit\n     */\n    function deposit(uint256 amount) external nonReentrant whenNotPaused {\n        require(amount > 0, \"Amount must be > 0\");\n        \n        // Calculate shares\n        uint256 shares;\n        if (totalShares == 0) {\n            shares = amount; // First deposit, 1:1 ratio\n        } else {\n            shares = (amount * totalShares) / getVaultValue();\n        }\n        \n        // Update state\n        userDeposits[msg.sender] += amount;\n        userShares[msg.sender] += shares;\n        totalShares += shares;\n        totalDeposits += amount;\n        \n        // Transfer tokens\n        depositToken.safeTransferFrom(msg.sender, address(this), amount);\n        \n        emit Deposit(msg.sender, amount, shares);\n    }\n    \n    /**\n     * @notice Withdraw USDC from the vault\n     * @param shares Number of shares to redeem\n     */\n    function withdraw(uint256 shares) external nonReentrant {\n        require(shares > 0 && shares <= userShares[msg.sender], \"Invalid shares\");\n        \n        // Calculate withdrawal amount\n        uint256 amount = (shares * getVaultValue()) / totalShares;\n        \n        // Apply fees if in profit\n        if (amount > userDeposits[msg.sender]) {\n            uint256 profit = amount - userDeposits[msg.sender];\n            uint256 performanceFeeAmount = (profit * tradingConfig.performanceFee) / 10000;\n            amount -= performanceFeeAmount;\n        }\n        \n        // Update state\n        userShares[msg.sender] -= shares;\n        totalShares -= shares;\n        totalWithdrawals += amount;\n        \n        // Proportionally reduce user deposits\n        userDeposits[msg.sender] = (userDeposits[msg.sender] * userShares[msg.sender]) / \n                                    (userShares[msg.sender] + shares);\n        \n        // Transfer tokens\n        depositToken.safeTransfer(msg.sender, amount);\n        \n        emit Withdrawal(msg.sender, amount, shares);\n    }\n    \n    /**\n     * @notice Authorize a trade (called by AI agent)\n     * @param perpIndex Perpetual index to trade\n     * @param isLong Trade direction\n     * @param size Position size in USDC\n     * @param leverage Leverage amount\n     * @param maxSlippage Maximum allowed slippage\n     * @param stopLoss Stop loss price\n     * @param takeProfit Take profit price\n     */\n    function authorizeTrade(\n        uint32 perpIndex,\n        bool isLong,\n        uint256 size,\n        uint256 leverage,\n        uint256 maxSlippage,\n        uint256 stopLoss,\n        uint256 takeProfit\n    ) external onlyAIAgent returns (bytes32) {\n        // Validate parameters\n        require(size <= tradingConfig.maxPositionSize, \"Position too large\");\n        require(leverage <= tradingConfig.maxLeverage, \"Leverage too high\");\n        require(isAllowedAsset(perpIndex), \"Asset not allowed\");\n        \n        // Check vault has sufficient capital\n        uint256 requiredCapital = size / leverage; // Initial margin\n        require(getAvailableCapital() >= requiredCapital, \"Insufficient capital\");\n        \n        // Generate unique signal ID\n        bytes32 signalId = keccak256(\n            abi.encodePacked(perpIndex, isLong, size, block.timestamp, block.number)\n        );\n        \n        // Create authorization\n        tradeAuthorizations[signalId] = TradeAuthorization({\n            perpIndex: perpIndex,\n            isLong: isLong,\n            size: size,\n            leverage: leverage,\n            maxSlippage: maxSlippage,\n            stopLoss: stopLoss,\n            takeProfit: takeProfit,\n            expiry: block.timestamp + 5 minutes, // 5 minute expiry\n            signalId: signalId,\n            executed: false\n        });\n        \n        pendingAuthorizations.push(signalId);\n        \n        emit TradeAuthorized(signalId, perpIndex, isLong, size, leverage);\n        \n        return signalId;\n    }\n    \n    /**\n     * @notice Execute an authorized trade (called by keeper bot)\n     * @param signalId Signal ID of the authorized trade\n     * @param executionPrice Actual execution price from L1\n     * @param actualSize Actual executed size\n     */\n    function executeTradeConfirmation(\n        bytes32 signalId,\n        uint256 executionPrice,\n        uint256 actualSize\n    ) external onlyKeeperBot {\n        TradeAuthorization storage auth = tradeAuthorizations[signalId];\n        \n        require(!auth.executed, \"Already executed\");\n        require(block.timestamp <= auth.expiry, \"Authorization expired\");\n        require(actualSize <= auth.size, \"Size exceeds authorization\");\n        \n        // Mark as executed\n        auth.executed = true;\n        \n        // Remove from pending\n        _removePendingAuthorization(signalId);\n        \n        // Update trading volume\n        performance.totalVolume += actualSize;\n        \n        emit TradeExecuted(signalId, executionPrice, actualSize);\n    }\n    \n    /**\n     * @notice Update performance metrics (called by keeper bot)\n     * @param totalPnL Current total P&L\n     * @param sharpeRatio Current Sharpe ratio\n     */\n    function updatePerformance(\n        uint256 totalPnL,\n        uint256 sharpeRatio\n    ) external onlyKeeperBot {\n        performance.totalPnL = totalPnL;\n        performance.sharpeRatio = sharpeRatio;\n        performance.lastUpdate = block.timestamp;\n        \n        // Update high water mark for performance fees\n        uint256 currentValue = getVaultValue();\n        if (currentValue > highWaterMark) {\n            highWaterMark = currentValue;\n        }\n        \n        // Check drawdown and pause if necessary\n        if (highWaterMark > 0) {\n            uint256 drawdown = ((highWaterMark - currentValue) * 10000) / highWaterMark;\n            if (drawdown > tradingConfig.maxDrawdown) {\n                _pause();\n                emit EmergencyStop(\"Max drawdown exceeded\", block.timestamp);\n            }\n            \n            if (drawdown > performance.maxDrawdown) {\n                performance.maxDrawdown = drawdown;\n            }\n        }\n        \n        lastPerformanceUpdate = block.timestamp;\n        \n        emit PerformanceUpdated(totalPnL, sharpeRatio, block.timestamp);\n    }\n    \n    /**\n     * @notice Get current oracle price from HyperCore\n     * @param perpIndex Perpetual index\n     * @return price Oracle price (scaled by 1e6)\n     */\n    function getOraclePrice(uint32 perpIndex) public view returns (uint64) {\n        (bool success, bytes memory result) = ORACLE_PX_PRECOMPILE.staticcall(\n            abi.encode(perpIndex)\n        );\n        require(success, \"Oracle price fetch failed\");\n        return abi.decode(result, (uint64));\n    }\n    \n    /**\n     * @notice Get current vault value in USDC\n     * @return Total vault value\n     */\n    function getVaultValue() public view returns (uint256) {\n        uint256 balance = depositToken.balanceOf(address(this));\n        // Add unrealized P&L from open positions (would be tracked by keeper bot)\n        return balance + performance.totalPnL;\n    }\n    \n    /**\n     * @notice Get available capital for trading\n     * @return Available capital in USDC\n     */\n    function getAvailableCapital() public view returns (uint256) {\n        uint256 balance = depositToken.balanceOf(address(this));\n        // Reserve 10% for withdrawals\n        uint256 reserved = (balance * 1000) / 10000;\n        return balance > reserved ? balance - reserved : 0;\n    }\n    \n    /**\n     * @notice Check if an asset is allowed for trading\n     * @param perpIndex Perpetual index to check\n     * @return Whether the asset is allowed\n     */\n    function isAllowedAsset(uint32 perpIndex) public view returns (bool) {\n        for (uint i = 0; i < tradingConfig.allowedAssets.length; i++) {\n            if (tradingConfig.allowedAssets[i] == perpIndex) {\n                return true;\n            }\n        }\n        return tradingConfig.allowedAssets.length == 0; // Allow all if none specified\n    }\n    \n    /**\n     * @notice Remove a signal from pending authorizations\n     * @param signalId Signal ID to remove\n     */\n    function _removePendingAuthorization(bytes32 signalId) private {\n        for (uint i = 0; i < pendingAuthorizations.length; i++) {\n            if (pendingAuthorizations[i] == signalId) {\n                pendingAuthorizations[i] = pendingAuthorizations[pendingAuthorizations.length - 1];\n                pendingAuthorizations.pop();\n                break;\n            }\n        }\n    }\n    \n    // Admin functions\n    \n    /**\n     * @notice Update trading configuration\n     * @param config New trading configuration\n     */\n    function updateTradingConfig(TradingConfig memory config) external onlyOwner {\n        tradingConfig = config;\n    }\n    \n    /**\n     * @notice Update keeper bot address\n     * @param _keeperBot New keeper bot address\n     */\n    function updateKeeperBot(address _keeperBot) external onlyOwner {\n        keeperBot = _keeperBot;\n    }\n    \n    /**\n     * @notice Update AI agent address\n     * @param _aiAgent New AI agent address\n     */\n    function updateAIAgent(address _aiAgent) external onlyOwner {\n        aiAgent = _aiAgent;\n    }\n    \n    /**\n     * @notice Emergency pause\n     */\n    function emergencyPause() external onlyOwner {\n        _pause();\n        emit EmergencyStop(\"Manual pause\", block.timestamp);\n    }\n    \n    /**\n     * @notice Resume operations\n     */\n    function resume() external onlyOwner {\n        _unpause();\n    }\n}"
      },
      "project/src/contracts/hyperevm/L1Read.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title L1Read\n * @notice Interface for reading data from HyperCore L1 via precompiles\n * @dev Based on official Hyperliquid L1Read.sol specification\n */\ncontract L1Read {\n    // Precompile addresses\n    address constant ORACLE_PX_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000807;\n    address constant SPOT_META_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000808;\n    address constant PERP_META_INFO_PRECOMPILE_ADDRESS = 0x0000000000000000000000000000000000000809;\n    address constant PERP_ASSET_INFO_PRECOMPILE_ADDRESS = 0x000000000000000000000000000000000000080a;\n    address constant USER_POSITION_PRECOMPILE_ADDRESS = 0x000000000000000000000000000000000000080b;\n    address constant USER_SPOT_BALANCE_PRECOMPILE_ADDRESS = 0x000000000000000000000000000000000000080C;\n    address constant USER_PERP_BALANCE_PRECOMPILE_ADDRESS = 0x000000000000000000000000000000000000080D;\n    \n    // Structs for asset information\n    struct PerpAssetInfo {\n        string name;\n        uint8 szDecimals;\n    }\n    \n    struct SpotMeta {\n        string name;\n        uint32 index;\n        string tokenAddress;\n        uint8 szDecimals;\n        uint8 weiDecimals;\n    }\n    \n    struct PerpMetaInfo {\n        string name;\n        uint32 index;\n        uint8 szDecimals;\n    }\n    \n    struct UserPosition {\n        int256 szi;  // Signed size (positive for long, negative for short)\n        uint256 entryPx;  // Entry price\n        uint256 mtm;  // Mark-to-market value\n        int256 pnl;  // Realized P&L\n        int256 funding;  // Funding payments\n    }\n    \n    /**\n     * @notice Get oracle price for a perpetual asset\n     * @param index Perpetual index\n     * @return price Oracle price (scaled by 1e6)\n     */\n    function oraclePx(uint32 index) public view returns (uint64) {\n        bool success;\n        bytes memory result;\n        (success, result) = ORACLE_PX_PRECOMPILE_ADDRESS.staticcall(abi.encode(index));\n        require(success, \"OraclePx precompile call failed\");\n        return abi.decode(result, (uint64));\n    }\n    \n    /**\n     * @notice Get spot metadata for an asset\n     * @param index Spot asset index\n     * @return meta Spot metadata\n     */\n    function spotMeta(uint32 index) public view returns (SpotMeta memory) {\n        bool success;\n        bytes memory result;\n        (success, result) = SPOT_META_PRECOMPILE_ADDRESS.staticcall(abi.encode(index));\n        require(success, \"SpotMeta precompile call failed\");\n        \n        (string memory name, uint32 idx, string memory tokenAddress, \n         uint8 szDecimals, uint8 weiDecimals) = abi.decode(\n            result, \n            (string, uint32, string, uint8, uint8)\n        );\n        \n        return SpotMeta({\n            name: name,\n            index: idx,\n            tokenAddress: tokenAddress,\n            szDecimals: szDecimals,\n            weiDecimals: weiDecimals\n        });\n    }\n    \n    /**\n     * @notice Get perpetual metadata\n     * @param index Perpetual index\n     * @return meta Perpetual metadata\n     */\n    function perpMetaInfo(uint32 index) public view returns (PerpMetaInfo memory) {\n        bool success;\n        bytes memory result;\n        (success, result) = PERP_META_INFO_PRECOMPILE_ADDRESS.staticcall(abi.encode(index));\n        require(success, \"PerpMetaInfo precompile call failed\");\n        \n        (string memory name, uint32 idx, uint8 szDecimals) = abi.decode(\n            result,\n            (string, uint32, uint8)\n        );\n        \n        return PerpMetaInfo({\n            name: name,\n            index: idx,\n            szDecimals: szDecimals\n        });\n    }\n    \n    /**\n     * @notice Get perpetual asset information\n     * @param index Perpetual index\n     * @return info Asset information\n     */\n    function perpAssetInfo(uint32 index) public view returns (PerpAssetInfo memory) {\n        bool success;\n        bytes memory result;\n        (success, result) = PERP_ASSET_INFO_PRECOMPILE_ADDRESS.staticcall(abi.encode(index));\n        require(success, \"PerpAssetInfo precompile call failed\");\n        \n        (string memory name, uint8 szDecimals) = abi.decode(result, (string, uint8));\n        \n        return PerpAssetInfo({\n            name: name,\n            szDecimals: szDecimals\n        });\n    }\n    \n    /**\n     * @notice Get user's position for a perpetual\n     * @param user User address\n     * @param perpIndex Perpetual index\n     * @return position User's position data\n     */\n    function getUserPosition(address user, uint32 perpIndex) public view returns (UserPosition memory) {\n        bool success;\n        bytes memory result;\n        bytes memory params = abi.encode(user, perpIndex);\n        (success, result) = USER_POSITION_PRECOMPILE_ADDRESS.staticcall(params);\n        require(success, \"UserPosition precompile call failed\");\n        \n        (int256 szi, uint256 entryPx, uint256 mtm, int256 pnl, int256 funding) = \n            abi.decode(result, (int256, uint256, uint256, int256, int256));\n        \n        return UserPosition({\n            szi: szi,\n            entryPx: entryPx,\n            mtm: mtm,\n            pnl: pnl,\n            funding: funding\n        });\n    }\n    \n    /**\n     * @notice Get user's spot balance\n     * @param user User address\n     * @param spotIndex Spot asset index\n     * @return balance User's spot balance\n     */\n    function getUserSpotBalance(address user, uint32 spotIndex) public view returns (uint256) {\n        bool success;\n        bytes memory result;\n        bytes memory params = abi.encode(user, spotIndex);\n        (success, result) = USER_SPOT_BALANCE_PRECOMPILE_ADDRESS.staticcall(params);\n        require(success, \"UserSpotBalance precompile call failed\");\n        return abi.decode(result, (uint256));\n    }\n    \n    /**\n     * @notice Get user's perpetual balance (margin)\n     * @param user User address\n     * @return balance User's perpetual margin balance\n     */\n    function getUserPerpBalance(address user) public view returns (int256) {\n        bool success;\n        bytes memory result;\n        (success, result) = USER_PERP_BALANCE_PRECOMPILE_ADDRESS.staticcall(abi.encode(user));\n        require(success, \"UserPerpBalance precompile call failed\");\n        return abi.decode(result, (int256));\n    }\n    \n    /**\n     * @notice Convert raw oracle price to standard format\n     * @param rawPrice Raw price from oracle\n     * @param szDecimals Size decimals for the asset\n     * @return price Converted price (scaled by 1e18)\n     */\n    function convertOraclePrice(uint64 rawPrice, uint8 szDecimals) public pure returns (uint256) {\n        // Oracle prices are in 1e6, convert to 1e18 and adjust for size decimals\n        uint256 divisor = 10 ** (6 - szDecimals);\n        return (uint256(rawPrice) * 1e18) / divisor;\n    }\n    \n    /**\n     * @notice Get all oracle prices for a list of perpetuals\n     * @param indices Array of perpetual indices\n     * @return prices Array of oracle prices\n     */\n    function batchOraclePrices(uint32[] memory indices) public view returns (uint64[] memory) {\n        uint64[] memory prices = new uint64[](indices.length);\n        for (uint i = 0; i < indices.length; i++) {\n            prices[i] = oraclePx(indices[i]);\n        }\n        return prices;\n    }\n    \n    /**\n     * @notice Calculate total portfolio value for a user\n     * @param user User address\n     * @param perpIndices Perpetual indices to check\n     * @param spotIndices Spot indices to check\n     * @return totalValue Total portfolio value in USDC (1e6)\n     */\n    function getPortfolioValue(\n        address user,\n        uint32[] memory perpIndices,\n        uint32[] memory spotIndices\n    ) public view returns (uint256 totalValue) {\n        // Add perpetual positions value\n        for (uint i = 0; i < perpIndices.length; i++) {\n            UserPosition memory pos = getUserPosition(user, perpIndices[i]);\n            if (pos.szi != 0) {\n                totalValue += pos.mtm;\n            }\n        }\n        \n        // Add spot balances value\n        for (uint i = 0; i < spotIndices.length; i++) {\n            uint256 balance = getUserSpotBalance(user, spotIndices[i]);\n            if (balance > 0) {\n                // Get spot price (assuming oracle provides it)\n                uint64 price = oraclePx(spotIndices[i]);\n                SpotMeta memory meta = spotMeta(spotIndices[i]);\n                \n                // Convert balance to value\n                uint256 value = (balance * uint256(price)) / (10 ** meta.weiDecimals);\n                totalValue += value;\n            }\n        }\n        \n        // Add margin balance\n        int256 marginBalance = getUserPerpBalance(user);\n        if (marginBalance > 0) {\n            totalValue += uint256(marginBalance);\n        }\n        \n        return totalValue;\n    }\n    \n    /**\n     * @notice Check if a position is at risk of liquidation\n     * @param user User address\n     * @param perpIndex Perpetual index\n     * @param maintenanceMarginRate Maintenance margin rate (basis points)\n     * @return atRisk Whether position is at risk\n     * @return marginRatio Current margin ratio\n     */\n    function checkLiquidationRisk(\n        address user,\n        uint32 perpIndex,\n        uint256 maintenanceMarginRate\n    ) public view returns (bool atRisk, uint256 marginRatio) {\n        UserPosition memory pos = getUserPosition(user, perpIndex);\n        if (pos.szi == 0) {\n            return (false, 0);\n        }\n        \n        int256 marginBalance = getUserPerpBalance(user);\n        uint256 positionValue = pos.mtm;\n        \n        // Calculate margin ratio\n        if (marginBalance > 0 && positionValue > 0) {\n            marginRatio = (uint256(marginBalance) * 10000) / positionValue;\n            atRisk = marginRatio < maintenanceMarginRate;\n        } else {\n            atRisk = true;\n            marginRatio = 0;\n        }\n        \n        return (atRisk, marginRatio);\n    }\n}"
      },
      "project/src/contracts/hyperevm/VaultFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./AIAgentVault.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title VaultFactory\n * @notice Factory contract for deploying AI Agent Vaults with performance tracking\n * @dev Manages vault creation, registry, and on-chain performance leaderboard\n */\ncontract VaultFactory is Ownable {\n    // Registry of all deployed vaults\n    address[] public allVaults;\n    mapping(address => address[]) public userVaults;\n    mapping(address => bool) public isVault;\n    mapping(address => VaultMetadata) public vaultMetadata;\n    \n    // Performance tracking\n    mapping(address => PerformanceRecord) public vaultPerformance;\n    address[] public leaderboard; // Sorted by performance\n    \n    // Factory configuration\n    uint256 public maxVaultsPerUser = 10;\n    uint256 public vaultCreationFee = 0.1 ether; // In HYPE\n    address public feeRecipient;\n    address public defaultDepositToken; // USDC on HyperEVM\n    \n    // Vault metadata\n    struct VaultMetadata {\n        string name;\n        string description;\n        address creator;\n        uint256 createdAt;\n        bool isActive;\n        string strategyType; // \"momentum\", \"arbitrage\", \"market-making\", etc.\n        uint256 targetAUM; // Target assets under management\n    }\n    \n    // Performance record for leaderboard\n    struct PerformanceRecord {\n        uint256 totalReturn; // Percentage return (basis points)\n        uint256 sharpeRatio; // Scaled by 1e18\n        uint256 maxDrawdown; // Maximum drawdown (basis points)\n        uint256 winRate; // Win rate (basis points)\n        uint256 totalVolume; // Total trading volume\n        uint256 aum; // Current assets under management\n        uint256 lastUpdated;\n        uint256 rank; // Position in leaderboard\n    }\n    \n    // Events\n    event VaultCreated(\n        address indexed vault,\n        address indexed creator,\n        string name,\n        address aiAgent,\n        address keeperBot\n    );\n    event PerformanceUpdated(\n        address indexed vault,\n        uint256 totalReturn,\n        uint256 sharpeRatio,\n        uint256 aum\n    );\n    event LeaderboardUpdated(address[] topVaults);\n    \n    constructor(address _defaultDepositToken, address _feeRecipient) Ownable(msg.sender) {\n        defaultDepositToken = _defaultDepositToken;\n        feeRecipient = _feeRecipient;\n    }\n    \n    /**\n     * @notice Create a new AI Agent Vault\n     * @param name Vault name\n     * @param description Vault description\n     * @param strategyType Trading strategy type\n     * @param aiAgent AI agent address\n     * @param keeperBot Keeper bot address\n     * @param tradingConfig Initial trading configuration\n     * @return vault Address of the deployed vault\n     */\n    function createVault(\n        string memory name,\n        string memory description,\n        string memory strategyType,\n        address aiAgent,\n        address keeperBot,\n        AIAgentVault.TradingConfig memory tradingConfig\n    ) external payable returns (address vault) {\n        require(msg.value >= vaultCreationFee, \"Insufficient creation fee\");\n        require(userVaults[msg.sender].length < maxVaultsPerUser, \"Max vaults reached\");\n        require(bytes(name).length > 0 && bytes(name).length <= 32, \"Invalid name length\");\n        \n        // Deploy new vault\n        vault = address(new AIAgentVault(\n            defaultDepositToken,\n            keeperBot,\n            aiAgent\n        ));\n        \n        // Configure vault\n        AIAgentVault(vault).updateTradingConfig(tradingConfig);\n        \n        // Transfer ownership to creator\n        AIAgentVault(vault).transferOwnership(msg.sender);\n        \n        // Update registry\n        allVaults.push(vault);\n        userVaults[msg.sender].push(vault);\n        isVault[vault] = true;\n        \n        // Store metadata\n        vaultMetadata[vault] = VaultMetadata({\n            name: name,\n            description: description,\n            creator: msg.sender,\n            createdAt: block.timestamp,\n            isActive: true,\n            strategyType: strategyType,\n            targetAUM: 0\n        });\n        \n        // Initialize performance record\n        vaultPerformance[vault] = PerformanceRecord({\n            totalReturn: 0,\n            sharpeRatio: 0,\n            maxDrawdown: 0,\n            winRate: 0,\n            totalVolume: 0,\n            aum: 0,\n            lastUpdated: block.timestamp,\n            rank: allVaults.length\n        });\n        \n        // Send creation fee to recipient\n        if (msg.value > 0) {\n            (bool sent, ) = feeRecipient.call{value: msg.value}(\"\");\n            require(sent, \"Fee transfer failed\");\n        }\n        \n        emit VaultCreated(vault, msg.sender, name, aiAgent, keeperBot);\n        \n        return vault;\n    }\n    \n    /**\n     * @notice Update performance metrics for a vault\n     * @param vault Vault address\n     * @dev Can only be called by the vault's keeper bot\n     */\n    function updatePerformance(address vault) external {\n        require(isVault[vault], \"Not a registered vault\");\n        \n        AIAgentVault vaultContract = AIAgentVault(vault);\n        require(msg.sender == vaultContract.keeperBot(), \"Only keeper bot\");\n        \n        // Get performance data from vault\n        uint256 vaultValue = vaultContract.getVaultValue();\n        uint256 totalDeposits = vaultContract.totalDeposits();\n        (uint256 totalPnL, uint256 winCount, uint256 lossCount, uint256 totalVolume, uint256 sharpeRatio, uint256 maxDrawdown, uint256 lastUpdate) = vaultContract.performance();\n        \n        // Calculate total return\n        uint256 totalReturn = 0;\n        if (totalDeposits > 0) {\n            if (vaultValue > totalDeposits) {\n                totalReturn = ((vaultValue - totalDeposits) * 10000) / totalDeposits;\n            }\n        }\n        \n        // Calculate win rate\n        uint256 totalTrades = winCount + lossCount;\n        uint256 winRateCalc = totalTrades > 0 ? (winCount * 10000) / totalTrades : 0;\n        \n        // Update performance record\n        PerformanceRecord storage record = vaultPerformance[vault];\n        record.totalReturn = totalReturn;\n        record.sharpeRatio = sharpeRatio;\n        record.maxDrawdown = maxDrawdown;\n        record.winRate = winRateCalc;\n        record.totalVolume = totalVolume;\n        record.aum = vaultValue;\n        record.lastUpdated = block.timestamp;\n        \n        emit PerformanceUpdated(vault, totalReturn, sharpeRatio, vaultValue);\n        \n        // Update leaderboard\n        _updateLeaderboard();\n    }\n    \n    /**\n     * @notice Update the performance leaderboard\n     * @dev Sorts vaults by composite score\n     */\n    function _updateLeaderboard() private {\n        // Simple bubble sort for small arrays\n        // In production, use more efficient sorting\n        uint256 n = allVaults.length;\n        for (uint256 i = 0; i < n - 1; i++) {\n            for (uint256 j = 0; j < n - i - 1; j++) {\n                if (_comparePerformance(allVaults[j], allVaults[j + 1]) < 0) {\n                    address temp = allVaults[j];\n                    allVaults[j] = allVaults[j + 1];\n                    allVaults[j + 1] = temp;\n                }\n            }\n        }\n        \n        // Update ranks\n        for (uint256 i = 0; i < n; i++) {\n            vaultPerformance[allVaults[i]].rank = i + 1;\n        }\n        \n        // Copy top vaults to leaderboard\n        delete leaderboard;\n        uint256 leaderboardSize = n < 100 ? n : 100; // Top 100\n        for (uint256 i = 0; i < leaderboardSize; i++) {\n            leaderboard.push(allVaults[i]);\n        }\n        \n        emit LeaderboardUpdated(leaderboard);\n    }\n    \n    /**\n     * @notice Compare performance of two vaults\n     * @param vaultA First vault\n     * @param vaultB Second vault\n     * @return comparison 1 if A > B, -1 if A < B, 0 if equal\n     */\n    function _comparePerformance(address vaultA, address vaultB) private view returns (int256) {\n        PerformanceRecord memory perfA = vaultPerformance[vaultA];\n        PerformanceRecord memory perfB = vaultPerformance[vaultB];\n        \n        // Composite score: 40% return, 30% Sharpe, 20% AUM, 10% volume\n        uint256 scoreA = (perfA.totalReturn * 40) / 100 +\n                         (perfA.sharpeRatio * 30) / 1e18 / 100 +\n                         (perfA.aum * 20) / 1e6 / 100 +\n                         (perfA.totalVolume * 10) / 1e6 / 100;\n                         \n        uint256 scoreB = (perfB.totalReturn * 40) / 100 +\n                         (perfB.sharpeRatio * 30) / 1e18 / 100 +\n                         (perfB.aum * 20) / 1e6 / 100 +\n                         (perfB.totalVolume * 10) / 1e6 / 100;\n        \n        if (scoreA > scoreB) return 1;\n        if (scoreA < scoreB) return -1;\n        return 0;\n    }\n    \n    /**\n     * @notice Get top performing vaults\n     * @param count Number of vaults to return\n     * @return vaults Array of vault addresses\n     * @return performances Array of performance records\n     */\n    function getTopVaults(uint256 count) \n        external \n        view \n        returns (\n            address[] memory vaults,\n            PerformanceRecord[] memory performances\n        ) \n    {\n        uint256 returnCount = count < leaderboard.length ? count : leaderboard.length;\n        vaults = new address[](returnCount);\n        performances = new PerformanceRecord[](returnCount);\n        \n        for (uint256 i = 0; i < returnCount; i++) {\n            vaults[i] = leaderboard[i];\n            performances[i] = vaultPerformance[leaderboard[i]];\n        }\n        \n        return (vaults, performances);\n    }\n    \n    /**\n     * @notice Get all vaults created by a user\n     * @param user User address\n     * @return Array of vault addresses\n     */\n    function getUserVaults(address user) external view returns (address[] memory) {\n        return userVaults[user];\n    }\n    \n    /**\n     * @notice Get detailed vault information\n     * @param vault Vault address\n     * @return metadata Vault metadata\n     * @return performance Performance record\n     */\n    function getVaultDetails(address vault)\n        external\n        view\n        returns (\n            VaultMetadata memory metadata,\n            PerformanceRecord memory performance\n        )\n    {\n        require(isVault[vault], \"Not a registered vault\");\n        return (vaultMetadata[vault], vaultPerformance[vault]);\n    }\n    \n    /**\n     * @notice Search vaults by strategy type\n     * @param strategyType Strategy type to search for\n     * @return Array of matching vault addresses\n     */\n    function searchVaultsByStrategy(string memory strategyType) \n        external \n        view \n        returns (address[] memory) \n    {\n        uint256 count = 0;\n        \n        // Count matching vaults\n        for (uint256 i = 0; i < allVaults.length; i++) {\n            if (keccak256(bytes(vaultMetadata[allVaults[i]].strategyType)) == \n                keccak256(bytes(strategyType))) {\n                count++;\n            }\n        }\n        \n        // Collect matching vaults\n        address[] memory matches = new address[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 0; i < allVaults.length; i++) {\n            if (keccak256(bytes(vaultMetadata[allVaults[i]].strategyType)) == \n                keccak256(bytes(strategyType))) {\n                matches[index++] = allVaults[i];\n            }\n        }\n        \n        return matches;\n    }\n    \n    /**\n     * @notice Deactivate a vault\n     * @param vault Vault address\n     * @dev Can only be called by vault creator\n     */\n    function deactivateVault(address vault) external {\n        require(isVault[vault], \"Not a registered vault\");\n        require(vaultMetadata[vault].creator == msg.sender, \"Not vault creator\");\n        \n        vaultMetadata[vault].isActive = false;\n    }\n    \n    /**\n     * @notice Update factory configuration\n     * @param _maxVaultsPerUser New maximum vaults per user\n     * @param _vaultCreationFee New vault creation fee\n     */\n    function updateConfig(\n        uint256 _maxVaultsPerUser,\n        uint256 _vaultCreationFee\n    ) external onlyOwner {\n        maxVaultsPerUser = _maxVaultsPerUser;\n        vaultCreationFee = _vaultCreationFee;\n    }\n    \n    /**\n     * @notice Update fee recipient\n     * @param _feeRecipient New fee recipient address\n     */\n    function updateFeeRecipient(address _feeRecipient) external onlyOwner {\n        feeRecipient = _feeRecipient;\n    }\n    \n    /**\n     * @notice Get total number of vaults\n     * @return Total vault count\n     */\n    function getTotalVaults() external view returns (uint256) {\n        return allVaults.length;\n    }\n    \n    /**\n     * @notice Get aggregate statistics across all vaults\n     * @return totalAUM Total assets under management\n     * @return totalVolume Total trading volume\n     * @return averageReturn Average return across all vaults\n     */\n    function getAggregateStats() \n        external \n        view \n        returns (\n            uint256 totalAUM,\n            uint256 totalVolume,\n            uint256 averageReturn\n        ) \n    {\n        uint256 sumReturns = 0;\n        uint256 activeVaults = 0;\n        \n        for (uint256 i = 0; i < allVaults.length; i++) {\n            address vault = allVaults[i];\n            if (vaultMetadata[vault].isActive) {\n                totalAUM += vaultPerformance[vault].aum;\n                totalVolume += vaultPerformance[vault].totalVolume;\n                sumReturns += vaultPerformance[vault].totalReturn;\n                activeVaults++;\n            }\n        }\n        \n        averageReturn = activeVaults > 0 ? sumReturns / activeVaults : 0;\n        \n        return (totalAUM, totalVolume, averageReturn);\n    }\n}"
      }
    }
  }
}